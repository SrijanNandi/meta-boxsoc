#!/bin/sh

INT_NAME=`sudo /sbin/ip link | /usr/bin/awk -F: '$0 !~ "lo|vir|wl|sit|^[^0-9]"{print $2;getline}' | /usr/bin/awk '{ sub(/^[ \t]+/, ""); print }' | /usr/bin/sort`
INT_NAME_COUNT=`sudo /sbin/ip link | /usr/bin/awk -F: '$0 !~ "lo|vir|wl|sit|^[^0-9]"{print $2;getline}' | /usr/bin/sort | /usr/bin/wc -l`

PROC_COUNT=`sudo /usr/bin/nproc --all`
MEMORY=`sudo /usr/bin/free -m | /usr/bin/awk '/^Mem:/{print $2}'`

SURICATA_CONF_FILE="/etc/suricata/suricata.yaml"
INT_WAN_COUNT=`sudo /usr/bin/find /etc/systemd/network -name "*.wan*" | /usr/bin/awk -F/ '{ print $NF }' | cut -d. -f1 | wc -l`
INT_LAN_COUNT=`sudo /usr/bin/find /etc/systemd/network -name "*.lan*" | /usr/bin/awk -F/ '{ print $NF }' | cut -d. -f1 | wc -l`

THREADS_COUNT=$(($PROC_COUNT-1))


function suricata_conf {
	for ((i=0; i<7; i+=1)); do
                        INT_FULL_NAME=`find /etc/systemd/network -name "*.wan$i*" | awk -F/ '{ print $NF }' | cut -d. -f1 ;find /etc/systemd/network -name "*.lan$i*" | awk -F/ '{ print $NF }' | cut -d. -f1`
                        array+=($(echo "$INT_FULL_NAME"))
        done
	INT_FULL_NAME_COUNT=${#array[@]}
	if [[ "$INT_FULL_NAME_COUNT" == "6" ]]; then
		INT_FULL_NAME_COUNT=3
        elif [[ "$INT_FULL_NAME_COUNT" == "4" ]]; then
                INT_FULL_NAME_COUNT=2
        elif [[ "$INT_FULL_NAME_COUNT" == "2" ]]; then
                INT_FULL_NAME_COUNT=1 ]]
        else
                INT_FULL_NAME_COUNT=0
        fi
	
	for ((i=0; i<$INT_FULL_NAME_COUNT; i+=1)); do
                INT_FULL_NAME=`find /etc/systemd/network -name "*.wan$i*" | awk -F/ '{ print $NF }' | cut -d. -f1 ;find /etc/systemd/network -name "*.lan$i*" | awk -F/ '{ print $NF }' | cut -d. -f1`
                array+=($(echo "$INT_FULL_NAME"))
        done

        ITER=1
        if [ "$INT_NAME_COUNT" -le "1" ] || [ "$THREADS_COUNT" -le "1" ]; then
                TMP_FILE="/tmp/suricata.temp"
                cat << 'EOF' > $TMP_FILE
  #- interface: FIRST_INT
  #  threads: THREADS_COUNT
  #  cluster-id: FIRST_ID
  #  defrag: no
  #  cluster-type: cluster_flow
  #  xdp-mode: driver
  #  xdp-filter-file:  /etc/suricata/ebpf/xdp_filter.bpf
  #  bypass: yes
  #  copy-mode: ips
  #  use-mmap: yes
  #  ring-size: 500000
  #  buffer-size: 5368709120
  #  rollover: no
  #  use-emergency-flush: yes
  #  copy-iface: SECOND_INT
  #- interface: SECOND_INT
  #  threads: THREADS_COUNT
  #  cluster-id: SECOND_ID
  #  defrag: no
  #  cluster-type: cluster_flow
  #  xdp-mode: driver
  #  xdp-filter-file:  /etc/suricata/ebpf/xdp_filter.bpf
  #  bypass: yes
  #  copy-mode: ips
  #  use-mmap: yes
  #  ring-size: 500000
  #  buffer-size: 5368709120
  #  rollover: no
  #  use-emergency-flush: yes
  #  copy-iface: FIRST_INT
EOF
        else
                for ((i=0; i<${#array[@]}-1; i+=2)); do
                        TMP_FILE="/tmp/suricata.temp$i"
                        cat << 'EOF' > $TMP_FILE
  - interface: FIRST_INT
    threads: THREADS_COUNT
    cluster-id: FIRST_ID
    defrag: no
    cluster-type: cluster_flow
    #xdp-mode: driver
    #xdp-filter-file:  /etc/suricata/ebpf/xdp_filter.bpf
    bypass: yes
    copy-mode: tap
    use-mmap: yes
    #ring-size: 500000
    #buffer-size: 5368709120
    rollover: no
    use-emergency-flush: yes
    copy-iface: SECOND_INT
  - interface: SECOND_INT
    threads: THREADS_COUNT
    cluster-id: SECOND_ID
    defrag: no
    cluster-type: cluster_flow
    #xdp-mode: driver
    #xdp-filter-file:  /etc/suricata/ebpf/xdp_filter.bpf
    bypass: yes
    copy-mode: tap
    use-mmap: yes
    #ring-size: 500000
    #buffer-size: 5368709120
    rollover: no
    use-emergency-flush: yes
    copy-iface: FIRST_INT
EOF
                        sudo sed -i "s/- interface: FIRST_INT/- interface: ${array[$i]}/g" $TMP_FILE
                        sudo sed -i "s/cluster-id: FIRST_ID/cluster-id: $(expr 99 - $ITER)/g" $TMP_FILE
                        sudo sed -i "s/copy-iface: SECOND_INT/copy-iface: "${array[$i+1]}"/g" $TMP_FILE
                        sudo sed -i "s/- interface: SECOND_INT/- interface: "${array[$i+1]}"/g" $TMP_FILE
                        sudo sed -i "s/cluster-id: SECOND_ID/cluster-id: $(expr 99 - $ITER - 1)/g" $TMP_FILE
                        sudo sed -i "s/copy-iface: FIRST_INT/copy-iface: "${array[$i]}"/g" $TMP_FILE
                        sudo sed -i "s/threads: THREADS_COUNT/threads: $THREADS_COUNT/g" $TMP_FILE
                        ITER=$(expr $ITER + 2)

                done
       fi

        cat /tmp/suricata.temp* >> /tmp/newfile.temp

        if [ -f $SURICATA_CONF_FILE ]; then
                cp -r /etc/suricata/suricata.yaml /etc/suricata/suricata.yaml.ORIG
        fi

        sudo sed -i "/AF_PACKET/ e cat /tmp/newfile.temp" $SURICATA_CONF_FILE
        sudo sed -i '/AF_PACKET/d' $SURICATA_CONF_FILE
        sudo rm -rf /tmp/suricata.temp*
        sudo rm -rf /tmp/newfile.temp*
}

function min_requirements_ips {
	if [ "$INT_NAME_COUNT" -le "1" ]; then
        	#echo "Minimun 2 Interfaces required to run IPS Engine"
        	local retval1='Insufficient Interfaces'
		echo "$retval1"
    	fi

    	if [ "$PROC_COUNT" -le "2" ]; then
        	#echo "Cores Detected: "$PROC_COUNT". Minimum 3 cores are required to start the IPS Engine"
        	local retval2='Insufficient Processor Cores'
		echo "$retval2"
    	fi

    	if [ "$MEMORY" -lt "2048" ]; then
        	#echo "IPS Engine requires *AT LEAST* 4GB of RAM. Current Memory is: $MEMORY"
        	local retval3='Insufficient Memory'
		echo "$retval3"
   	fi
}

function suricata_ips {
	min_req=$(min_requirements_ips)
	if [[ "$min_req" == "Insufficient Interfaces" || "$min_req" == "Insufficient Processor Cores" || "$min_req" == "Insufficient Memory" ]]; then
		echo "Minimum Requirements did not match. Not starting IPS Engine"
		sudo systemctl stop suricata >/dev/null 2>&1
		sudo systemctl disable suricata >/dev/null 2>&1
		sudo sleep 2
		sudo systemctl daemon-reload >/dev/null 2>&1
                sudo sleep 2
	else
		suricata_conf
		sudo systemctl start suricata >/dev/null 2>&1
		sudo systemctl enable suricata >/dev/null 2>&1
		sudo sleep 2
		sudo systemctl daemon-reload >/dev/null 2>&1
		sudo sleep 2
	fi
}

if sudo ps aux | sudo grep "suricata" | sudo grep -v 'grep\|vi\|vim' >/dev/null; then
        read -p "IPS Engine is currently enabled. Would you like to disable? [y/n]? " yn
        case $yn in
            [Yy]* ) if [[ `sudo systemctl is-enabled suricata` = "enabled" ]]; then
                        sudo systemctl disable suricata >/dev/null 2>&1
			sudo systemctl daemon-reload >/dev/null 2>&1
                    else
                        :
                    fi 
		    sudo systemctl stop suricata >/dev/null 2>&1
		    sudo sleep 2
		    ;;
            [Nn]* ) 
		    exit
		    ;;
            * ) 
		    echo "Please answer y or n."
		    ;;
         esac
else
	read -p "IPS Engine is currently disabled. Would you like to enable? [y/n]? " yn
	case $yn in
            [Yy]* )
		    if [[ `sudo systemctl is-enabled suricata` = "disabled" ]]; then
			    suricata_ips
                    else
                        :
                    fi
		    ;;
            [Nn]* )
		    exit
		    ;;
            * )
		    echo "Please answer y or n."
		    ;;
    esac
fi
