#!/bin/sh

INT_NAME=`/sbin/ip link | /usr/bin/awk -F: '$0 !~ "lo|vir|wl|sit|^[^0-9]"{print $2;getline}' | /usr/bin/awk '{ sub(/^[ \t]+/, ""); print }' | /usr/bin/sort`

declare -a array=($(echo "$INT_NAME"))

function interface_spec {
for ((i=0; i<${#array[@]}; i+=1)); do
	echo -e -n "$(($i + 1))"; echo -e -n ") "
	MAC_ADDR=`/bin/cat /sys/class/net/${array[$i]}/address`
	STATE=`/bin/cat /sys/class/net/${array[$i]}/operstate`
	CARRIER=`/bin/cat /sys/class/net/${array[$i]}/carrier`
            if [ "$CARRIER" -eq "0" ]; then
	        CARRIER_STATE="physical link is down"
            else
	        CARRIER_STATE="physical link is up"
            fi
	echo -e "${array[$i]}\t\t\t$CARRIER_STATE\t$MAC_ADDR"
done
}

function mgmt_interface_file {
echo -e "1) Static"
echo -e "2) Dynamic (DHCP)"
echo
read -p "Enter the number for the configuration type on Management Interface: " CONF_TYPE
case $CONF_TYPE in
	[1]* )
		read -p "Enter the MGMT IP Address with subnet mask: " MGMT_IP
		read -p "Enter the Default Gateway: " MGMT_GATEWAY
		read -p "Enter a DNS Address: " MGMT_DNS
		cat << 'EOF' > /tmp/${array[$i]}.network
[Match]
Name=INTERFACE_NAME
KernelCommandLine=!nfsroot
[Network]
INTERFACE_ADDRESS
INTERFACE_GATEWAY
INTERFACE_DNS
EOF
		sed -i "s/INTERFACE_NAME/${array[$i]}/g" "/tmp/${array[$i]}.network"
		sed -i "s~INTERFACE_ADDRESS~Address=$MGMT_IP~g" "/tmp/${array[$i]}.network"
		sed -i "s/INTERFACE_GATEWAY/Gateway=$MGMT_GATEWAY/g" "/tmp/${array[$i]}.network"
		sed -i "s/INTERFACE_DNS/DNS=$MGMT_DNS/g" "/tmp/${array[$i]}.network"
		;;
	[2]* )
		cat << 'EOF' > /tmp/${array[$i]}.network
[Match]
Nane=INTERFACE_NAME
KernelCommandLine=!nfsroot
[Network]
INTERFACE_ADDRESS
[DHCPv4]
UseHostname=false
EOF
		sed -i "s/INTERFACE_NAME/${array[$i]}/g" "/tmp/${array[$i]}.network"
		sed -i "s/INTERFACE_ADDRESS/DHCP=v4/g" "/tmp/${array[$i]}.network"
		;;
	* )
		echo -e "Please select a valid configuration."
		;;
esac
}

function wan_interface_file {
cat << 'EOF' > /tmp/${array[$i]}.network
[Match]
Name=INTERFACE_NAME
KernelCommandLine=!nfsroot
[Network]
INTERFACE_ADDRESS
EOF

sed -i "s/INTERFACE_NAME/${array[$i]}/g" "/tmp/${array[$i]}.network"
sed -i "s/INTERFACE_ADDRESS/Address=0.0.0.0/g" "/tmp/${array[$i]}.network"
}

function lan_interface_file {
cat << 'EOF' > /tmp/${array[$i]}.network
[Match]
Name=INTERFACE_NAME
KernelCommandLine=!nfsroot
[Network]
INTERFACE_ADDRESS
EOF

sed -i "s/INTERFACE_NAME/${array[$i]}/g" "/tmp/${array[$i]}.network"
sed -i "s/INTERFACE_ADDRESS/Address=0.0.0.0/g" "/tmp/${array[$i]}.network"
}

function bridge_interface_file () {
cat << 'EOF' > /tmp/br$1.network
[NetDev]
Name=brx
Kind=bridge
EOF

sed -i "s/Name=brx/Name=br$1/" "/tmp/br$1.network"
}

function wan_bridge_interface_file () {
cat << 'EOF' > /tmp/${array[$i]}.network
[Match]
Name=INTERFACE_NAME

[Network]
Bridge=brx
EOF

sed -i "s/INTERFACE_NAME/${array[$i]}/g" "/tmp/${array[$i]}.network"
sed -i "s/Name=brx/Name=br$1/" "/tmp/br$1.network"
}

function lan_bridge_interface_file () {
cat << 'EOF' > /tmp/${array[$i]}.network
[Match]
Name=INTERFACE_NAME

[Network]
Bridge=brx
EOF

sed -i "s/INTERFACE_NAME/${array[$i]}/g" "/tmp/${array[$i]}.network"
sed -i "s/Name=brx/Name=br$1/" "/tmp/br$1.network"
}

## Clean
if [ -f "/tmp/*.network" ]; then
	rm -rf /tmp/*.network
fi

echo
echo
echo "First Install Script"
echo "===================="
echo
interface_spec
echo
read -p "Enter the number of the interface you wish to configure " NUM
echo
for ((i=0; i<=${#array[@]}; i+=1)); do
    case $NUM in
        [$(($i+1))]* ) echo "Type WAN or wan for WAN Interface"
		       echo "Type LAN or lan for LAN Interface"
		       echo "Type MGMT or mgmt for Management Interface"
		       echo "Type WANBR or wnabr for WAN Bridge"
		       echo "Type LANBR or lanbr for LAN BRidge"
		       read -p "Do you want to configure it as WAN/LAN or MANAGEMENT INT: " CHOICE
		       if [[ $CHOICE == "WAN" || $CHOICE == "wan" ]]; then
		            sudo /bin/rm -rf /etc/systemd/network/en.network
			    wan_interface_file
			    sudo /bin/cp /tmp/${array[$i]}.network /etc/systemd/network/${array[$i]}wan$i.network
			    sudo /bin/systemctl restart systemd-networkd
			    sleep 4
		       elif [[ $CHOICE == "LAN" || $CHOICE == "lan" ]]; then
			    sudo /bin/rm -rf /etc/systemd/network/en.network
		            lan_interface_file
			    sudo /bin/cp /tmp/${array[$i]}.network /etc/systemd/network/${array[$i]}lan$i.network
			    sudo /bin/systemctl restart systemd-networkd
		       elif [[ $CHOICE == "MGMT" || $CHOICE == "mgmt" ]]; then
			    sudo /bin/rm -rf /etc/systemd/network/en.network
		            mgmt_interface_file
			    sudo /bin/cp /tmp/${array[$i]}.network /etc/systemd/network/${array[$i]}mgmt.network
			    sudo /bin/systemctl restart systemd-networkd
			    MGMT_IP=`/sbin/ip -o -4 addr list ${array[$i]} | /usr/bin/awk '{print $4}' | /usr/bin/cut -d/ -f1`
		       elif [[ $CHOICE == "WANBR" || $CHOICE == "wanbr" ]]; then
                            sudo /bin/rm -rf /etc/systemd/network/en.network
                            INT_NAME_COUNT=`sudo /sbin/ip link | sudo awk -F: '$0 !~ "lo|vir|wl|sit|^[^0-9]"{print $2;getline}' | sudo sort | sudo wc -l`
			    if [[ "$INT_NAME_COUNT" == "3" ]]; then
				    bridge_interface_file 1
			    	    wan_bridge_interace_file 1
			    elif [[ "$INT_NAME_COUNT" == "5" ]]; then
				    bridge_interface_file 2
				    wan_bridge_interface_file 2
		            elif [[ "$INT_NAME_COUNT" == "7" ]]; then
				    bridge_interface_file
				    wan_bridge_interface_file 3
			    else
				    echo ""
		            fi
                            sudo /bin/cp /tmp/br*.network /etc/systemd/network
                            sudo /bin/cp /tmp/${array[$i]}.network /etc/systemd/network/${array[$i]}wan$i.network
			    sudo /bin/systemctl restart systemd-networkd
		       elif [[ $CHOICE == "LANBR" || $CHOICE == "lanbr" ]]; then
                            sudo /bin/rm -rf /etc/systemd/network/en.network
                            INT_NAME_COUNT=`sudo /sbin/ip link | sudo awk -F: '$0 !~ "lo|vir|wl|sit|^[^0-9]"{print $2;getline}' | sudo sort | sudo wc -l`
			    if [[ "$INT_NAME_COUNT" == "3" ]]; then
				    bridge_interface_file 1
			    	    lan_bridge_interace_file 1
			    elif [[ "$INT_NAME_COUNT" == "5" ]]; then
				    bridge_interface_file 2
				    lan_bridge_interface_file 2
		            elif [[ "$INT_NAME_COUNT" == "7" ]]; then
				    bridge_interface_file
				    lan_bridge_interface_file 3
			    else
				    echo ""
		            fi
                            sudo /bin/cp /tmp/br*.network /etc/systemd/network
                            sudo /bin/cp /tmp/${array[$i]}.network /etc/systemd/network/${array[$i]}lan$i.network
			    sudo /bin/systemctl restart systemd-networkd
			    echo ""
			    
		       fi
		       break
	  	       ;;
		* )
		       echo "Invalid Entry "
		       exit 1
		       ;;
    esac
done

## Clean
if [ -f "/tmp/*.network" ]; then
	rm -rf /tmp/*.network
fi

function remove_elasticsearch {
	sudo systemctl stop elasticsearch
	sudo sleep 2
	sudo apt-get remove --purge elasticsearch*
}

function remove_siem {
	sudo systemctl stop graylog-server
	sudo sleep 2
	sudo apt-get remove --purge graylog*
}

function siem_for_public {
	sed -i "s/server_name 0.0.0.0;/server_name $1;/g" /etc/nginx/sites-available/boxsoc_server
	if [ -f "/etc/nginx/sites-enabled/default_server" ] ; then
		unlink /etc/nginx/sites-enabled/default_server
	else
		:
	fi
	systemctl restart nginx
}

function elasticsearch_for_public {
	sed -i "s/#network.host:[[:space:]]192.168.0.1/network.host: $1/g" /etc/elasticsearch/elasticsearch.yml
}

function elasticsearch_for_public_iptables_rule {
	iptables_rules_path=/etc/iptables/iptables.rules

	elasticsearch_rule=`grep -hrne "-A INPUT -p tcp -m tcp --dport 9200 -m conntrack --ctstate NEW -j ACCEPT" $iptables_rules_path > /dev/null 2>&1`

	if [ "$?" -eq 0 ] && [ -z "$elasticsearch_rule" ]; then
		:
	else
		http_rule=`grep -hrne "-A INPUT -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW -j ACCEPT" $iptables_rules_path  > /dev/null 2>&1`
		if [ "$?" -eq 0 ] && [ -z "$http_rule" ]; then
       			rule_num=`grep -hrne "-A INPUT -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW -j ACCEPT" $iptables_rules_path | awk -F: '{print $1}'`
			sed -i "$((rule_num+1))i -A INPUT -p tcp -m tcp --dport 9200 -m conntrack --ctstate NEW -j ACCEPT" $iptables_rules_path
       			/usr/sbin/iptables-restore < $iptables_rules_path
		fi
	fi
}

function min_requirements_ips {
    INT_NAME_COUNT=`sudo /sbin/ip link | sudo awk -F: '$0 !~ "lo|vir|wl|^[^0-9]"{print $2;getline}' | sudo sort | sudo uniq -D -w3 | sudo wc -l`
    PROC_COUNT=`sudo /usr/bin/nproc --all`
    MEMORY=`sudo /usr/bin/free -m | awk '/^Mem:/{print $2}'`
    
    if [ "$INT_NAME_COUNT" -le "0" ]; then
        echo
        #echo "Minimun 2 Interfaces required to run IPS Engine"
        local retval1='Insuffcient Interfaces'
	echo "$retval1"
    fi

    if [ "$PROC_COUNT" -le "2" ]; then
        echo
        #echo "Cores Detected: "$PROC_COUNT". Minimum 3 cores are required to start the IPS Engine"
        local retval2='Insufficient Processor Cores'
	echo "$retval2"
    fi

    if [ "$MEMORY" -lt "2048" ]; then
        echo
        #echo "IPS Engine requires *AT LEAST* 4GB of RAM. Current Memory is: $MEMORY"
        local retval3='Insufficient Memory'
	echo "$retval3"
    fi
}
 
function suricata_conf {
        SURICATA_CONF_FILE="/etc/suricata/suricata.yaml"
        INT_WAN_COUNT=`find /etc/systemd/network -name "*.wan*" | awk -F/ '{ print $NF }' | cut -d. -f1 | wc -l`
        INT_LAN_COUNT=`find /etc/systemd/network -name "*.lan*" | awk -F/ '{ print $NF }' | cut -d. -f1 | wc -l`
        INT_NAME_COUNT=`ip link | awk -F: '$0 !~ "lo|vir|wl|sit|^[^0-9]"{print $2;getline}' | sort | uniq -D -w3 | wc -l`
        PROC_COUNT=`/usr/bin/nproc --all`
        for ((i=0; i<5; i+=1)); do
                INT_NAME=`find /etc/systemd/network -name "*.wan$i*" | awk -F/ '{ print $NF }' | cut -d. -f1 ;find /etc/systemd/network -name "*.lan$i*" | awk -F/ '{ print $NF }' | cut -d. -f1`
                array+=($(echo "$INT_NAME"))
        done

        ITER=1
        THREADS_COUNT=$(($PROC_COUNT-1))
        if [ "$INT_NAME_COUNT" -le "1" ] || [ "$THREADS_COUNT" -le "1" ]; then
                TMP_FILE="/tmp/suricata.temp"
                cat << 'EOF' > $TMP_FILE
  #- interface: FIRST_INT
  #  threads: THREADS_COUNT
  #  cluster-id: FIRST_ID
  #  defrag: no
  #  cluster-type: cluster_flow
  #  xdp-mode: driver
  #  xdp-filter-file:  /etc/suricata/ebpf/xdp_filter.bpf
  #  bypass: yes
  #  copy-mode: ips
  #  use-mmap: yes
  #  ring-size: 500000
  #  buffer-size: 5368709120
  #  rollover: no
  #  use-emergency-flush: yes
  #  copy-iface: SECOND_INT
  #- interface: SECOND_INT
  #  threads: THREADS_COUNT
  #  cluster-id: SECOND_ID
  #  defrag: no
  #  cluster-type: cluster_flow
  #  xdp-mode: driver
  #  xdp-filter-file:  /etc/suricata/ebpf/xdp_filter.bpf
  #  bypass: yes
  #  copy-mode: ips
  #  use-mmap: yes
  #  ring-size: 500000
  #  buffer-size: 5368709120
  #  rollover: no
  #  use-emergency-flush: yes
  #  copy-iface: FIRST_INT
EOF
        else
                for ((i=0; i<${#array[@]}-1; i+=2)); do
                        TMP_FILE="/tmp/suricata.temp$i"
                        cat << 'EOF' > $TMP_FILE
  - interface: FIRST_INT
    threads: THREADS_COUNT
    cluster-id: FIRST_ID
    defrag: no
    cluster-type: cluster_flow
    #xdp-mode: driver
    #xdp-filter-file:  /etc/suricata/ebpf/xdp_filter.bpf
    bypass: yes
    copy-mode: tap
    use-mmap: yes
    #ring-size: 500000
    #buffer-size: 5368709120
    rollover: no
    use-emergency-flush: yes
    copy-iface: SECOND_INT
  - interface: SECOND_INT
    threads: THREADS_COUNT
    cluster-id: SECOND_ID
    defrag: no
    cluster-type: cluster_flow
    #xdp-mode: driver
    #xdp-filter-file:  /etc/suricata/ebpf/xdp_filter.bpf
    bypass: yes
    copy-mode: tap
    use-mmap: yes
    #ring-size: 500000
    #buffer-size: 5368709120
    rollover: no
    use-emergency-flush: yes
    copy-iface: FIRST_INT
EOF
                        sed -i "s/- interface: FIRST_INT/- interface: ${array[$i]}/g" $TMP_FILE
                        sed -i "s/cluster-id: FIRST_ID/cluster-id: $(expr 99 - $ITER)/g" $TMP_FILE
                        sed -i "s/copy-iface: SECOND_INT/copy-iface: "${array[$i+1]}"/g" $TMP_FILE
                        sed -i "s/- interface: SECOND_INT/- interface: "${array[$i+1]}"/g" $TMP_FILE
                        eed -i "s/cluster-id: SECOND_ID/cluster-id: $(expr 99 - $ITER - 1)/g" $TMP_FILE
                        sed -i "s/copy-iface: FIRST_INT/copy-iface: "${array[$i]}"/g" $TMP_FILE
                        sed -i "s/threads: THREADS_COUNT/threads: $THREADS_COUNT/g" $TMP_FILE
                        ITER=$(expr $ITER + 2)

                done
       fi

        cat /tmp/suricata.temp* >> /tmp/newfile.temp

        if [ -f $SURICATA_CONF_FILE ]; then
                cp -r /etc/suricata/suricata.yaml /etc/suricata/suricata.yaml.ORIG
        fi

        sed -i "/AF_PACKET/ e cat /tmp/newfile.temp" $SURICATA_CONF_FILE
        sed -i '/AF_PACKET/d' $SURICATA_CONF_FILE
        rm -rf /tmp/suricata.temp*
        rm -rf /tmp/newfile.temp*
}

function suricata_ips {
	local min_req=$(min_requirements_ips)
	if [[ "$min_req" == "retval1" || "$min_req" == "retval2" || "$min_req" == "retval3" ]]; then
		echo "Minimum Requirements did not match for starting IPS Engine"
		sudo systemctl stop suricata >/dev/null 2>&1
		sudo systemctl disable suricata >/dev/null 2>&1
                sudo sleep 2
	else
		suricata_conf
		sudo systemctl start suricata >/dev/null 2>&1
		sudo systemctl enable suricata >/dev/null 2>&1
		sudo sleep 2
	fi
}


function min_requirements_firewall {
    INT_NAME_COUNT=`sudo /sbin/ip link | sudo awk -F: '$0 !~ "lo|vir|wl|^[^0-9]"{print $2;getline}' | sudo sort | sudo uniq -D -w3 | sudo wc -l`
    
    if [ "$INT_NAME_COUNT" -le "0" ]; then
        echo
        echo "Minimun 2 Interfaces required to run Firewall"
        local retval_firewall='Insuffcient Interfaces'
	echo "$retval_firewall"
    fi
}

function firewall_in_bridge {
	local min_req_firewall=$(min_requirements_firewall)
	if [[ "$min_req_firewall" == "Insufficient Interfaces" ]]; then
		echo ""
	else



echo -e " Select the type of Installation: "
echo
echo -e " 1) Log Forwarder Only (without IPS)"
echo -e " 2) Log Forwarder with IPS "
echo -e " 2) Only SIEM GUI "
echo -e " 3) Only Elasticsearch DB "
echo -e " 4) Both SIEM GUI along with Elasticsearch DB "
echo
read -p "Enter the Installation Mode: " im

case $im in
	[1]* )
		local min_req=$(min_requirements_firewall)
		sudo systemctl start graylog-forwarder >/dev/null 2>&1
                sudo systemctl enable graylog-forwarder >/dev/null 2>&1
		remove_siem
		remove_elasticsearch
		;;
	[2]* )
		suricata_ips
		sudo systemctl start graylog-forwarder >/dev/null 2>&1
                sudo systemctl enable graylog-forwarder >/dev/null 2>&1
		remove_siem
		remove_elasticsearch
		;;
	[3]* )
		remove_elasticsearch
                siem_for_public "$MGMT_IP"
		;;
	[4]* )
		remove_siem
                elasticsearch_for_public "$MGMT_IP"
		elasticsearch_for_public_iptables_rule
		;;
	[5]* )
		siem_for_public "$MGMTS_IP"
		;;
	* )
		echo "Invalid Option. Selct from option 1 to 4."
		;;
esac


function apt_change {
	FILE=/etc/apt/sources.list
	if [ -f "$FILE" ]; then
		cp $FILE $FILE.ORIG
		sudo echo > $FILE
		echo "deb http://45.79.125.227:5679/repo_dunfell monkeyshoulder main" >> $FILE
	else
		echo "deb http://45.79.125.227:5679/repo_dunfell monkeyshoulder main" >> $FILE
	fi
}

apt_change
